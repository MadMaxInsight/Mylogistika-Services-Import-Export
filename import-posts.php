<?php
/**
 * –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü —É—Å–ª—É–≥ –∏–∑ CSV –≤ ACF Gutenberg –±–ª–æ–∫–∏ (content_template.txt + placeholders + –∞–≤—Ç–æ-–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫)
 */
define('WP_USE_THEMES', false); // –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–º—ã
require_once( dirname(__FILE__, 5) . '/wp-load.php' );
require_once ABSPATH . 'wp-admin/includes/post.php'; // –¥–ª—è get_post()
require_once ABSPATH . 'wp-admin/includes/image.php'; // –¥–ª—è wp_generate_attachment_metadata

// –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä—ã WP –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞–ª –∫–∞–≤—ã—á–∫–∏ –∏ HTML –≤ –±–ª–æ–∫–∞—Ö)
remove_all_filters('content_save_pre');
remove_all_filters('content_filtered_save_pre');

$log_file      = __DIR__ . '/import_log.txt';
$csv_file      = __DIR__ . "/service-post_import.csv";
$template_file = __DIR__ . "/content_template.txt";

if (!file_exists($csv_file)) die("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ $csv_file\n");
if (!file_exists($template_file)) die("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ $template_file\n");

// ---------- –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω ----------
$template_raw = file($template_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
// –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (# –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏)
$template_clean = array_filter($template_raw, function($line) {
    return !preg_match('/^\s*#/', $line);
});
$template = implode("\n", $template_clean);

// ---------- CSV ----------
$handle  = fopen($csv_file, 'r');
$headers = fgetcsv($handle, 0, ',');
if (!$headers) die("‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ CSV\n");

while (($data = fgetcsv($handle, 0, ',')) !== false) {
    $row = array_combine($headers, $data);

    // ---------- –°–û–ó–î–ê–ù–ò–ï / –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–°–¢–ê ----------
    $post_id = !empty($row['ID']) ? (int)$row['ID'] : 0;
    $post_is_exist  = $post_id ? get_post($post_id) : null;

    // ---------- –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —à–∞–±–ª–æ–Ω ----------
    $post_content = $template;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {{...}}
    $post_content = preg_replace_callback('/{{(.*?)}}/', function($matches) use ($row, $template) {
        $placeholder = trim($matches[1]);

        // 1) –ü—É—Ç—å/URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä—è–º–æ –≤ —à–∞–±–ª–æ–Ω–µ
        if (preg_match('/\.(png|jpe?g|gif|svg)$/i', $placeholder)) {
            $id = get_or_upload_attachment_id($placeholder);
            return $id ? $id : '"' . $placeholder . '"';
        }

        // 2) –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª–∏/—Å–µ–∫—Ü–∏–∏: {{blocks.xxx.yyy.item.field}}
        if (strpos($placeholder, '.item.') !== false) {
            // –ü—Ä–∏–º–µ—Ä: blocks.price.delivery_options.item.title
            //         blocks.coop_state.sections.item.title
            [$csv_header, $field] = explode('.item.', $placeholder, 2);


            // –î–æ—Å—Ç–∞—ë–º JSON –∏–∑ CSV
            if (!isset($row[$csv_header])) return '""';
            $items = json_decode($row[$csv_header], true);
            if (!is_array($items) || !$items) return '""';

            $is_sections = str_contains($csv_header, 'sections'); // –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–ø—Ä–º–∏–µ—Ä blocks.coop_state.sections

            // –ë–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è ACF-–∫–ª—é—á–µ–π:
            // - –¥–ª—è —Å–µ–∫—Ü–∏–π: sections_%d_section_<field>
            // - –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª–µ–π (delivery_options –∏ –ø—Ä.): <basename>_%d_<field>
            if ($is_sections) {
                $acf_key_fmt       = 'sections_%d_section_' . $field;
                $acf_underscore_fmt= '_sections_%d_section_' . $field;
                $acf_zero_key      = sprintf($acf_key_fmt, 0);            // sections_0_section_title
                $acf_zero_us_key   = sprintf($acf_underscore_fmt, 0);     // _sections_0_section_title
            } else {
                // basename = –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ .item (–Ω–∞–ø—Ä., delivery_options)
                $parts = explode('.', $csv_header);         // ['blocks','price','delivery_options']
                $basename = end($parts);                  // 'delivery_options'
                $acf_key_fmt        = $basename . '_%d_' . $field;      // delivery_options_%d_title
                $acf_underscore_fmt = '_' . $basename . '_%d_' . $field;// _delivery_options_%d_title
                $acf_zero_key       = sprintf($acf_key_fmt, 0);
                $acf_zero_us_key    = sprintf($acf_underscore_fmt, 0);
            }

            // –ü–æ–∏—â–µ–º –≤ —à–∞–±–ª–æ–Ω–µ field-key –¥–ª—è –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç–æ–≥–æ –∫–ª—é—á–∞ –∏–Ω–¥–µ–∫—Å–∞ 0,
            // —á—Ç–æ–±—ã —Ä–∞–∑–º–Ω–æ–∂–∏—Ç—å –µ–≥–æ –Ω–∞ 1..N (–µ—Å–ª–∏ –æ–Ω –≤–æ–æ–±—â–µ –µ—Å—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ)
            $field_key_val = null;
            $pattern = '/"' . preg_quote($acf_zero_us_key, '/') . '"\s*:\s*"([^"]+)"/u';
            if (preg_match($pattern, $template, $m)) {
                $field_key_val = $m[1]; // –Ω–∞–ø—Ä–∏–º–µ—Ä "field_cooperation_section_title"
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É:
            // - –¥–ª—è i=0: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ (–±–µ–∑ –∫–ª—é—á–∞)
            // - –¥–ª—è i>=1: –¥–æ–±–∞–≤–ª—è–µ–º , "–∫–ª—é—á_i":–∑–Ω–∞—á–µ–Ω–∏–µ_i
            //   + –µ—Å–ª–∏ –Ω–∞—à—ë–ª—Å—è –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π –∫–ª—é—á –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ 0 ‚Äî –∫–ª–æ–Ω–∏—Ä—É–µ–º –µ–≥–æ —Ç–æ–∂–µ –Ω–∞ i>=1
            $out = '';
            $counter = 0;
            $is_counter_printed = false;
            foreach ($items as $i => $item) {
                $val = $item[$field] ?? '';
                $val = html_entity_decode($val, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                $encoded = wp_json_encode($val, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

                if ($i === 0) {
                    // –í —à–∞–±–ª–æ–Ω–µ —É–∂–µ –µ—Å—Ç—å "–∫–ª—é—á_0": {{...}} ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                    $out .= $encoded;
                } else {
                    $acf_key_i = sprintf($acf_key_fmt, $i);
                    $out .= ",\n" . "\"{$acf_key_i}\":" . $encoded;

                    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π –∫–ª—é—á (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ —à–∞–±–ª–æ–Ω–µ –¥–ª—è i=0)
                    if ($field_key_val !== null) {
                        $acf_us_key_i = sprintf($acf_underscore_fmt, $i);
                        $out .= ",\n" . "\"{$acf_us_key_i}\":\"{$field_key_val}\"";
                    }
                }
                $counter++;
            }

            if ($basename && !$is_counter_printed) {
                $out .= ",\n" . "\"{$basename}\":\"{$counter}\"";
                $is_counter_printed = true;
            }
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (sections / delivery_options –∏ —Ç.–ø.) —Ç—É—Ç –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º,
            // —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å ‚Äî –¥–µ—Ä–∂–∏—Ç–µ —ç—Ç–æ –ø–æ–ª–µ –≤ —à–∞–±–ª–æ–Ω–µ –≤—Ä—É—á–Ω—É—é.
            return $out !== '' ? $out : '""';
        }

        // 3) –û–±—ã—á–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã ‚Äî –∫–ª—é—á –∏–∑ CSV
        if (isset($row[$placeholder])) {
            $value = $row[$placeholder];

            // –ï—Å–ª–∏ JSON –≤ CSV ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –∫–∞–∫ –µ—Å—Ç—å
            $decoded_json = json_decode($value, true);
            if (is_array($decoded_json)) {
                return json_encode($decoded_json, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é ‚Äî –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ ID –≤–ª–æ–∂–µ–Ω–∏—è
            if (preg_match('/\.(png|jpe?g|gif|svg)$/i', $value)) {
                $id = get_or_upload_attachment_id($value);
                return $id ? $id : '"' . $value . '"';
            }

            // –°—Ç—Ä–æ–∫–∏/—á–∏—Å–ª–∞ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º (HTML-—Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
            $decoded = html_entity_decode($value, ENT_QUOTES | ENT_HTML5, 'UTF-8');
            return wp_json_encode($decoded, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
        }

        // 4) –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        return '""';
    }, $post_content);

    
    // –ß–∏—Å—Ç–∏–º JSON –æ—Ç –≤–∏—Å—è—á–∏—Ö –∑–∞–ø—è—Ç—ã—Ö
    $post_content = preg_replace('/,(\s*})/', '$1', $post_content);

    // ---------- –õ–û–ì ----------
    file_put_contents(
        $log_file,
        "----- POST ID: {$post_id} -----\n" . $post_content . "\n\n",
        FILE_APPEND | LOCK_EX
    );

    // die();

    // ---------- –°–û–•–†–ê–ù–ï–ù–ò–ï ----------
    $postarr = [
        'ID'          => $post_is_exist ? $post_id : 0,
        'post_type'   => 'services',
        'post_status' => 'publish',
        'post_title'  => $row['Title'],
        'post_name'   => sanitize_title($row['Slug']),
        'post_content'=> $post_content,
    ];






    if (!$post_is_exist) {
        $post_id = wp_insert_post($postarr);
        update_yoast_wpseo($post_id, $row['_yoast_wpseo_title'] ?? false, $row['_yoast_wpseo_metadesc'] ?? false);
        echo "üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç #$post_id ({$row['Title']})\n";
    } else {
        wp_update_post($postarr);
        update_yoast_wpseo($post_id, $row['_yoast_wpseo_title'] ?? false, $row['_yoast_wpseo_metadesc'] ?? false);
        echo "‚ôªÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å—Ç #$post_id ({$row['Title']})\n";
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥"
    if (!empty($row['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥'])) {
        $taxonomy = 'service-category'; // —Ç–∞–∫—Å–æ–Ω–æ–º–∏—è
        $cat_path = array_map('trim', explode('>', $row['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥']));

        // $parent_id = 0;
        $assigned_ids = [];

        foreach ($cat_path as $cat_name) {
            if (!$cat_name) continue;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            $term = term_exists($cat_name, $taxonomy);
            if ($term === 0 || $term === null) continue;
            
            $assigned_ids[] = (int)$term['term_id'];
            // $parent_id = $term_id; // —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–º –∫ —ç—Ç–æ–º—É
        }

        if ($assigned_ids) {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            wp_set_object_terms($post_id, $assigned_ids, $taxonomy);

            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –¥–µ–ª–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
            // if (function_exists('update_post_meta')) {
            //     update_post_meta($post_id, '_yoast_wpseo_primary_' . $taxonomy, end($assigned_ids));
            // }
        }
    }

}

fclose($handle);

// ---------- –§–£–ù–ö–¶–ò–ò ----------

function update_yoast_wpseo($post_id, $title, $metadesc) {
    if (!empty($title)) {
        update_post_meta($post_id, '_yoast_wpseo_title', $title);
    }
    if (!empty($metadesc)) {
        update_post_meta($post_id, '_yoast_wpseo_metadesc', $metadesc);
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç ID –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç.
 */
function get_or_upload_attachment_id($file_path) {
    global $wpdb;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
    if (filter_var($file_path, FILTER_VALIDATE_URL)) {
        // –£–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω
        $parsed_url = wp_parse_url($file_path, PHP_URL_PATH);
        $relative_path = ltrim(str_replace('/wp-content/uploads/', '', $parsed_url), '/');
    } else {
        // –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (/wp-content/uploads/2025/03/file.png)
        $relative_path = ltrim(str_replace('/wp-content/uploads/', '', $file_path), '/');
    }

    // –ò—â–µ–º –≤ –ë–î
    $attachment_id = $wpdb->get_var(
        $wpdb->prepare(
            "SELECT post_id FROM {$wpdb->postmeta} WHERE meta_key = '_wp_attached_file' AND meta_value = %s",
            $relative_path
        )
    );

    if ($attachment_id) {
        return (int)$attachment_id;
    }

    // –§–∏–∑–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
    $full_path = wp_get_upload_dir()['basedir'] . '/' . $relative_path;
    if (!file_exists($full_path)) {
        error_log("‚ö†Ô∏è –§–∞–π–ª $file_path ($full_path) –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
        return 0;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
    $filetype = wp_check_filetype(basename($full_path), null);
    $attachment = [
        'guid'           => wp_get_upload_dir()['baseurl'] . '/' . $relative_path,
        'post_mime_type' => $filetype['type'],
        'post_title'     => preg_replace('/\.[^.]+$/', '', basename($full_path)),
        'post_content'   => '',
        'post_status'    => 'inherit',
    ];

    $attach_id = wp_insert_attachment($attachment, $full_path);
    $attach_data = wp_generate_attachment_metadata($attach_id, $full_path);
    wp_update_attachment_metadata($attach_id, $attach_data);

    return (int)$attach_id;
}